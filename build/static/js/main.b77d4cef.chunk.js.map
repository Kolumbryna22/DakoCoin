{"version":3,"sources":["logo.svg","IdeasTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","columns","title","dataIndex","key","IdeasTable","fetchIdeas","axios","get","then","response","console","log","setState","ideasArray","data","catch","err","error","slugify","string","a","p","RegExp","split","join","toString","toLowerCase","replace","c","charAt","indexOf","onClickSubmit","ideaInput","state","ideaSubmitting","this","className","placeholder","value","onPressEnter","onChange","e","target","type","loading","onClick","style","margin","dataSource","onRow","record","rowIndex","event","onDoubleClick","onContextMenu","onMouseEnter","onMouseLeave","React","Component","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,kC,+PCKrCC,G,MAAU,CACd,CACEC,MAAO,KACPC,UAAW,KACXC,IAAK,MAEP,CACEF,MAAO,OACPC,UAAW,OACXC,IAAK,QAEP,CACEF,MAAO,aACPC,UAAW,aACXC,IAAK,gBA8GMC,E,YAzGb,aAAe,IAAD,8BACZ,+CAYFC,WAAa,WACXC,IACGC,IAAI,UACJC,MAAK,SAAAC,GACJC,QAAQC,IAAI,4BACZD,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAEC,WAAYJ,EAASK,UAEtCC,OAAM,SAAAC,GACLN,QAAQO,MAAM,gCACdP,QAAQO,MAAMD,OAvBN,EA2BdE,QAAU,SAAAC,GACR,IAAMC,EAAI,4NAEJC,EAAI,IAAIC,OAAOF,EAAEG,MAAM,IAAIC,KAAK,KAAM,KAC5C,OAAOL,EACJM,WACAC,cACAC,QAAQ,OAAQ,KAChBA,QAAQN,GAAG,SAAAO,GAAC,MANL,qDAMWC,OAAOT,EAAEU,QAAQF,OACnCD,QAAQ,KAAM,SACdA,QAAQ,YAAa,IACrBA,QAAQ,OAAQ,KAChBA,QAAQ,MAAO,IACfA,QAAQ,MAAO,KAxCN,EA2CdI,cAAgB,WAAO,IACbC,EAAc,EAAKC,MAAnBD,UAER,EAAKpB,SAAS,CAAEsB,gBAAgB,IAChC,EAAKtB,SAAS,CAAEoB,UAAW,KAE3B1B,IACGC,IADH,mBACmB,EAAKW,QAAQc,KAC7BxB,MAAK,SAAAC,GACJC,QAAQC,IAAI,uBACZ,EAAKC,SAAS,CAAEsB,gBAAgB,IAChC,EAAK7B,gBAENU,OAAM,SAAAC,GACLN,QAAQO,MAAM,6BACd,EAAKL,SAAS,CAAEsB,gBAAgB,IAChCxB,QAAQO,MAAMD,OAzDlB,EAAKiB,MAAQ,CACXD,UAAW,GACXE,gBAAgB,EAChBrB,WAAY,IALF,E,iFAUZsB,KAAK9B,e,+BAqDG,IAAD,SAC2C8B,KAAKF,MAA/CpB,EADD,EACCA,WAAYmB,EADb,EACaA,UAAWE,EADxB,EACwBA,eAC/B,OACE,yBAAKE,UAAU,kBACb,kBAAC,IAAD,CACEC,YAAY,eACZC,MAAON,EACPO,aAAcJ,KAAKJ,cACnBS,SAAU,SAAAC,GACR,EAAK7B,SAAS,CAAEoB,UAAWS,EAAEC,OAAOJ,WAGxC,kBAAC,IAAD,CACEK,KAAK,UACLC,QAASV,EACTW,QAASV,KAAKJ,cACde,MAAO,CAAEC,OAAQ,SAJnB,UAQClC,IAAe,IACd,kBAAC,IAAD,CACEmC,WAAYnC,EACZb,QAASA,EACTiD,MAAO,SAACC,EAAQC,GACd,MAAO,CACLN,QAAS,SAAAO,GACP1C,QAAQC,IAAI,6CAEd0C,cAAe,SAAAD,KACfE,cAAe,SAAAF,KACfG,aAAc,SAAAH,KACdI,aAAc,SAAAJ,c,GAhGLK,IAAMC,W,yBCNhBC,MAXf,WACE,OACE,yBAAKvB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKwB,IAAKC,IAAMzB,UAAU,WAAW0B,IAAI,SACzC,kBAAC,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlE,MAAK,SAAAmE,GACJA,EAAaC,gBAEd7D,OAAM,SAAAE,GACLP,QAAQO,MAAMA,EAAM4D,c","file":"static/js/main.b77d4cef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport axios from 'axios';\r\nimport { Table, Input, Button } from 'antd';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst columns = [\r\n  {\r\n    title: 'id',\r\n    dataIndex: 'id',\r\n    key: 'id'\r\n  },\r\n  {\r\n    title: 'idea',\r\n    dataIndex: 'idea',\r\n    key: 'idea'\r\n  },\r\n  {\r\n    title: 'uploadDate',\r\n    dataIndex: 'uploadDate',\r\n    key: 'uploadDate'\r\n  }\r\n];\r\n\r\nclass IdeasTable extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      ideaInput: '',\r\n      ideaSubmitting: false,\r\n      ideasArray: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchIdeas();\r\n  }\r\n\r\n  fetchIdeas = () => {\r\n    axios\r\n      .get('/ideas')\r\n      .then(response => {\r\n        console.log('Result of getting ideas:');\r\n        console.log(response);\r\n        this.setState({ ideasArray: response.data });\r\n      })\r\n      .catch(err => {\r\n        console.error('Failed to get ideas with err');\r\n        console.error(err);\r\n      });\r\n  };\r\n\r\n  slugify = string => {\r\n    const a = 'àáäâãåăæçèéëêǵḧìíïîḿńǹñòóöôœøṕŕßśșțùúüûǘẃẍÿź·/_,:;';\r\n    const b = 'aaaaaaaaceeeeghiiiimnnnooooooprssstuuuuuwxyz------';\r\n    const p = new RegExp(a.split('').join('|'), 'g');\r\n    return string\r\n      .toString()\r\n      .toLowerCase()\r\n      .replace(/\\s+/g, '-') // Replace spaces with -\r\n      .replace(p, c => b.charAt(a.indexOf(c))) // Replace special characters\r\n      .replace(/&/g, '-and-') // Replace & with ‘and’\r\n      .replace(/[^\\w\\-]+/g, '') // Remove all non-word characters\r\n      .replace(/--+/g, '-') // Replace multiple - with single -\r\n      .replace(/^-+/, '') // Trim - from start of text\r\n      .replace(/-+$/, ''); // Trim - from end of text\r\n  };\r\n\r\n  onClickSubmit = () => {\r\n    const { ideaInput } = this.state;\r\n\r\n    this.setState({ ideaSubmitting: true });\r\n    this.setState({ ideaInput: '' });\r\n\r\n    axios\r\n      .get(`/proveIt/${this.slugify(ideaInput)}`)\r\n      .then(response => {\r\n        console.log('Submitted new idea.');\r\n        this.setState({ ideaSubmitting: false });\r\n        this.fetchIdeas();\r\n      })\r\n      .catch(err => {\r\n        console.error('Failed to submit with err');\r\n        this.setState({ ideaSubmitting: false });\r\n        console.error(err);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { ideasArray, ideaInput, ideaSubmitting } = this.state;\r\n    return (\r\n      <div className=\"ideasTableRoot\">\r\n        <Input\r\n          placeholder=\"Add an idea!\"\r\n          value={ideaInput}\r\n          onPressEnter={this.onClickSubmit}\r\n          onChange={e => {\r\n            this.setState({ ideaInput: e.target.value });\r\n          }}\r\n        />\r\n        <Button\r\n          type=\"primary\"\r\n          loading={ideaSubmitting}\r\n          onClick={this.onClickSubmit}\r\n          style={{ margin: '10px' }}\r\n        >\r\n          Submit\r\n        </Button>\r\n        {ideasArray !== [] && (\r\n          <Table\r\n            dataSource={ideasArray}\r\n            columns={columns}\r\n            onRow={(record, rowIndex) => {\r\n              return {\r\n                onClick: event => {\r\n                  console.log('We will add some proof logic here later.');\r\n                }, // click row\r\n                onDoubleClick: event => {}, // double click row\r\n                onContextMenu: event => {}, // right button click row\r\n                onMouseEnter: event => {}, // mouse enter row\r\n                onMouseLeave: event => {} // mouse leave row\r\n              };\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IdeasTable;","import React from 'react';\nimport IdeasTable from './IdeasTable.js';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <IdeasTable />\n      </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}